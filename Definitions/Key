class Key:
    def __init__(self, symbol, home, major):
        self.symbol = symbol
        self.tonic = home % 12
        self.isMajor = major
        self.scale = self.getScale()

    def getScale(self):
        scale = dict({self.tonic: "1"})
        counter = self.tonic
        degreeCounter = 2
        if self.isMajor:
            pattern = [2, 2, 1, 2, 2, 2]
            for step in pattern:
                note = (counter + step) % 12
                counter = note
                scale[note] = degreeCounter
                degreeCounter += 1
        else:
            pattern = [2, 1, 2, 2, 1, 2]
            for step in pattern:
                note = (counter + step) % 12
                counter = note
                scale[note] = degreeCounter
                degreeCounter += 1
        return scale

    def usesMajorPalette(self):
        if self.isMajor:
            return True
        else:
            return False

    def getScaleDegree(self, note):
        if note % 12 in self.getScale():
            return self.scale[note % 12]
        else:
            raise ValueError("this pitch is non-diatonic")

    @classmethod
    def keyFromUser(cls, symbol):
        tonic = symbol  # tonic is a string
        major = True
        if "m" in tonic:
            tonic = tonic[0:len(tonic) - 1]
            major = False

        # use chromatic scale dictionaries to convert to midiNumber
        if "#" in tonic:
            chromatic = {"C": 0, "C#": 1, "D": 2, "D#": 3, "E": 4, "F": 5,
                         "F#": 6, "G": 7, "G#": 8, "A": 9, "A#": 10, "B": 11}
        else:
            chromatic = {"C": 0, "Db": 1, "D": 2, "Eb": 3, "E": 4, "F": 5,
                         "Gb": 6, "G": 7, "Ab": 8, "A": 9, "Bb": 10, "B": 11}
        tonicMidi = chromatic[tonic]
        return cls(symbol, tonicMidi, major)
