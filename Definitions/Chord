class Chord:
    def __init__(self, definition):
        self.symbol = definition.symbol
        self.degrees = definition.degrees
        self.next = definition.next
        self.inversion = definition.inversion
        
    def hasScaleDegree(self, note):
        return note in self.degrees
    
    def getSuccessors(self, note):
        successors = list()
        for c in self.next:
            if c.hasScaleDegree(note):
                list.append(c)
        return successors
    
    def hasParallels(self, nextChord, note1, note2):
        bassNote1 = self.degrees[self.inversion] 
        bassNote2 = nextChord.degrees[nextChord.inversion]
        interval1 = (note1 - bassNote1)%7
        interval2 = (note2 - bassNote2)%7
        #need to somehow deal with case where current chord and next chord are identical
        if interval1 == interval2:
            if interval1 == 0:
                return True
            elif interval1 == 4:
                if note1 == 4 or note2 == 4:
                    return False
                else:
                    return True
          
